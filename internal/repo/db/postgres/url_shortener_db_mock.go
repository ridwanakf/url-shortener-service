// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ridwanakf/url-shortener-service/internal (interfaces: ShortenerDBRepo)

// Package db is a generated GoMock package.
package db

import (
	gomock "github.com/golang/mock/gomock"
	entity "github.com/ridwanakf/url-shortener-service/internal/entity"
	reflect "reflect"
)

// MockShortenerDBRepo is a mock of ShortenerDBRepo interface
type MockShortenerDBRepo struct {
	ctrl     *gomock.Controller
	recorder *MockShortenerDBRepoMockRecorder
}

// MockShortenerDBRepoMockRecorder is the mock recorder for MockShortenerDBRepo
type MockShortenerDBRepoMockRecorder struct {
	mock *MockShortenerDBRepo
}

// NewMockShortenerDBRepo creates a new mock instance
func NewMockShortenerDBRepo(ctrl *gomock.Controller) *MockShortenerDBRepo {
	mock := &MockShortenerDBRepo{ctrl: ctrl}
	mock.recorder = &MockShortenerDBRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockShortenerDBRepo) EXPECT() *MockShortenerDBRepoMockRecorder {
	return m.recorder
}

// CreateNewShortURL mocks base method
func (m *MockShortenerDBRepo) CreateNewShortURL(arg0 entity.URL) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewShortURL", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewShortURL indicates an expected call of CreateNewShortURL
func (mr *MockShortenerDBRepoMockRecorder) CreateNewShortURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewShortURL", reflect.TypeOf((*MockShortenerDBRepo)(nil).CreateNewShortURL), arg0)
}

// DeleteURL mocks base method
func (m *MockShortenerDBRepo) DeleteURL(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteURL", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteURL indicates an expected call of DeleteURL
func (mr *MockShortenerDBRepoMockRecorder) DeleteURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteURL", reflect.TypeOf((*MockShortenerDBRepo)(nil).DeleteURL), arg0)
}

// GetAllURL mocks base method
func (m *MockShortenerDBRepo) GetAllURL(arg0 string) ([]entity.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllURL", arg0)
	ret0, _ := ret[0].([]entity.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllURL indicates an expected call of GetAllURL
func (mr *MockShortenerDBRepoMockRecorder) GetAllURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllURL", reflect.TypeOf((*MockShortenerDBRepo)(nil).GetAllURL), arg0)
}

// GetURL mocks base method
func (m *MockShortenerDBRepo) GetURL(arg0 string) (entity.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetURL", arg0)
	ret0, _ := ret[0].(entity.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetURL indicates an expected call of GetURL
func (mr *MockShortenerDBRepoMockRecorder) GetURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetURL", reflect.TypeOf((*MockShortenerDBRepo)(nil).GetURL), arg0)
}

// HasShortURLExpired mocks base method
func (m *MockShortenerDBRepo) HasShortURLExpired(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HasShortURLExpired", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// HasShortURLExpired indicates an expected call of HasShortURLExpired
func (mr *MockShortenerDBRepoMockRecorder) HasShortURLExpired(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HasShortURLExpired", reflect.TypeOf((*MockShortenerDBRepo)(nil).HasShortURLExpired), arg0)
}

// IsShortURLExist mocks base method
func (m *MockShortenerDBRepo) IsShortURLExist(arg0 string) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IsShortURLExist", arg0)
	ret0, _ := ret[0].(bool)
	return ret0
}

// IsShortURLExist indicates an expected call of IsShortURLExist
func (mr *MockShortenerDBRepoMockRecorder) IsShortURLExist(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IsShortURLExist", reflect.TypeOf((*MockShortenerDBRepo)(nil).IsShortURLExist), arg0)
}

// UpdateShortURL mocks base method
func (m *MockShortenerDBRepo) UpdateShortURL(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShortURL", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateShortURL indicates an expected call of UpdateShortURL
func (mr *MockShortenerDBRepoMockRecorder) UpdateShortURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShortURL", reflect.TypeOf((*MockShortenerDBRepo)(nil).UpdateShortURL), arg0, arg1)
}
