// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/ridwanakf/url-shortener-service/internal (interfaces: ShortenerDB)

// Package db is a generated GoMock package.
package db

import (
	gomock "github.com/golang/mock/gomock"
	entity "github.com/ridwanakf/url-shortener-service/internal/entity"
	reflect "reflect"
)

// MockShortenerDB is a mock of ShortenerDB interface
type MockShortenerDB struct {
	ctrl     *gomock.Controller
	recorder *MockShortenerDBMockRecorder
}

// MockShortenerDBMockRecorder is the mock recorder for MockShortenerDB
type MockShortenerDBMockRecorder struct {
	mock *MockShortenerDB
}

// NewMockShortenerDB creates a new mock instance
func NewMockShortenerDB(ctrl *gomock.Controller) *MockShortenerDB {
	mock := &MockShortenerDB{ctrl: ctrl}
	mock.recorder = &MockShortenerDBMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockShortenerDB) EXPECT() *MockShortenerDBMockRecorder {
	return m.recorder
}

// CreateNewShortURL mocks base method
func (m *MockShortenerDB) CreateNewShortURL(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNewShortURL", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateNewShortURL indicates an expected call of CreateNewShortURL
func (mr *MockShortenerDBMockRecorder) CreateNewShortURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNewShortURL", reflect.TypeOf((*MockShortenerDB)(nil).CreateNewShortURL), arg0, arg1)
}

// DeleteURL mocks base method
func (m *MockShortenerDB) DeleteURL(arg0 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteURL", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteURL indicates an expected call of DeleteURL
func (mr *MockShortenerDBMockRecorder) DeleteURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteURL", reflect.TypeOf((*MockShortenerDB)(nil).DeleteURL), arg0)
}

// GetAllURL mocks base method
func (m *MockShortenerDB) GetAllURL() ([]entity.URL, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllURL")
	ret0, _ := ret[0].([]entity.URL)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllURL indicates an expected call of GetAllURL
func (mr *MockShortenerDBMockRecorder) GetAllURL() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllURL", reflect.TypeOf((*MockShortenerDB)(nil).GetAllURL))
}

// GetLongURL mocks base method
func (m *MockShortenerDB) GetLongURL(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLongURL", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLongURL indicates an expected call of GetLongURL
func (mr *MockShortenerDBMockRecorder) GetLongURL(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLongURL", reflect.TypeOf((*MockShortenerDB)(nil).GetLongURL), arg0)
}

// UpdateShortURL mocks base method
func (m *MockShortenerDB) UpdateShortURL(arg0, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateShortURL", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateShortURL indicates an expected call of UpdateShortURL
func (mr *MockShortenerDBMockRecorder) UpdateShortURL(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateShortURL", reflect.TypeOf((*MockShortenerDB)(nil).UpdateShortURL), arg0, arg1)
}
